from pyagnps import aims
from pyagnps.utils import log_to_file
from pathlib import Path

import sys

import argparse


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--credentials',         type=str, help='Path to the json file containing the database connection credentials')
    parser.add_argument('--nldas2_centroids',    type=str, help='Path to the GeoPackage containing the NLDAS2 centroids')
    parser.add_argument('--scs_storm_types',     type=str, help='Path to the GeoPackage containing the SCS storm type zones')
    parser.add_argument('--precip_zones',        type=str, help='Path to the GeoPackage containing the precipitation zones')
    parser.add_argument('--output_folder',       type=str, help='Path to the output folder to store the generated files')
    parser.add_argument('--start_date',          type=str, help='Start date of the simulation', default='2000-01-01')
    parser.add_argument('--end_date',            type=str, help='End date of the simulation', default='2022-12-31')
    parser.add_argument('--climate_method',      type=str, help='Climate method to generate files for', default='nldas2_database')
    parser.add_argument('--climate_table',       type=str, help='Climate table to generate files for', default='climate_nldas2')
    parser.add_argument('--thuc_id',             type=str, help='THUC ID to generate files for')
    parser.add_argument('--reach_id',            type=int, help='Reach ID to generate files for (default=2)', default=2)
    parser.add_argument('--fragment_watershed',  type=str, help='Reach ID to generate files for (default=2)', default="true")
    parser.add_argument('--generate_main_files', type=str, help='Generate main files', default="true")
    parser.add_argument('--num_processes',       type=int, help='Number of processes to use', default=16)
    parser.add_argument('--log_file',            type=str, help='Path to the log file', default="generate_watershed_files.log")

    args = parser.parse_args()

    credentials              = Path(args.credentials)
    path_to_nldas2_centroids = Path(args.nldas2_centroids)
    path_to_scs_storm_types  = Path(args.scs_storm_types)
    path_to_precip_zones     = Path(args.precip_zones)

    output_folder            = Path(args.output_folder)

    log_file_path = Path(args.log_file)

    generate_main_files = args.generate_main_files

    climate_method = args.climate_method
    climate_table  = args.climate_table
    
    start_date = args.start_date
    end_date   = args.end_date
    thuc_id    = args.thuc_id
    reach_id   = args.reach_id

    fragment_watershed = args.fragment_watershed

    num_processes = args.num_processes


    if generate_main_files == "true":
        generate_main_files = True
    else:
        generate_main_files = False

    if fragment_watershed == "true":
        fragment_watershed = True
    else:
        fragment_watershed = False


    try:

        log_to_file(log_file_path, f"Connecting to db", add_timestamp=True)

        w = aims.AIMSWatershed(
                    credentials,
                    watershed_name=f"THUC {thuc_id} Reach {reach_id}",
                    watershed_description="As generated by AIMS",
                    watershed_location="USA",
                    thuc_id=thuc_id, reach_id=reach_id,
                    start_date=start_date,
                    end_date=end_date,
                    # selected_reaches_for_output=["OUTLET"],
                    climate_method=climate_method,
                    climate_table=climate_table,
                    # path_to_cmip_dir=path_to_cmip5_data_dir,
                    # path_to_cmip_station_points_id=path_to_cmip5_station_points_clim_id,
                    path_to_nldas2_centroids=path_to_nldas2_centroids,
                    path_to_scs_storm_types=path_to_scs_storm_types,
                    path_to_precip_zones=path_to_precip_zones,
                    output_folder=output_folder,
                    export_gis=False)

        w.output_options_global_dict['Glbl_All_EV_Nutr']   = ''
        w.output_options_global_dict['Glbl_All_EV_Pest']   = ''
        w.output_options_global_dict['Glbl_All_EV_Sed']    = ''
        w.output_options_global_dict['Glbl_All_EV_Wtr']    = ''
        w.output_options_global_dict['V1_EV']              = ''

        w.output_options_global_dict['Glbl_All_AA_Sed']    = 'F'
        w.output_options_global_dict['Glbl_All_AA_Wtr']    = 'F'
        w.output_options_global_dict['Glbl_All_AA_Nutr']   = 'F'
        w.output_options_global_dict['Glbl_All_AA_Pest']   = 'F'
        w.output_options_global_dict['V2_Concepts']        = 'F'

        w.output_options_global_dict['Reach_Routing_Flag'] = 'F'

        w.output_options_aa_dict['AA_Sed_Eros_UA']         = 'T'
        w.output_options_aa_dict['AA_Sed_Yld_UA']          = 'T'
        w.output_options_aa_dict['AA_Wtr_Yld_UA']          = 'T'

        w.output_options_tbl_dict['Gaging_Station_Hyd']    = 'F'
        w.output_options_tbl_dict['CCHE1D']                = 'F'

        w.simulation_period_data_dict['Number_Init_Years'] = 2

    except Exception as e:
        log_to_file(log_file_path, f"Error THUC {thuc_id}: {e}", add_timestamp=True)
        sys.exit(1)
        return

    if generate_main_files:
        log_to_file(log_file_path, f"Generating main files", add_timestamp=True)
        try:
            w.generate_annagnps_watershed_input_files()
        except Exception as e:
            log_to_file(log_file_path, f"Error THUC {thuc_id}: {e}", add_timestamp=True)
            sys.exit(1)
        else:
            fragment_watershed = False

    if fragment_watershed:
        log_to_file(log_file_path, f"Fragmenting watershed", add_timestamp=True)
        try:
            mini_watersheds = w.fragment_watershed(share_global_watershed_climate_params=False, # False to recompute climate parameters for every reach
                                                   num_processes=num_processes)
            
            df_mini_watersheds = aims.generate_df_mini_watersheds_dirs(mini_watersheds, root_folder=output_folder / "mini_watersheds")
            df_mini_watersheds.to_csv(output_folder / "mini_watersheds" / "dir_list.csv", index=False, header=False)
            log_to_file(log_file_path, f"Mini watershed files generated at {str(output_folder / 'mini_watersheds')}", add_timestamp=True)
        except Exception as e:
            log_to_file(log_file_path, f"Error THUC {thuc_id}: {e}", add_timestamp=True)
            sys.exit(1)

    sys.exit(0)

if __name__ == '__main__':
    main()


